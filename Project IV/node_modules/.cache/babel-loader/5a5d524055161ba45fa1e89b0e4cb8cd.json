{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alber\\\\OneDrive\\\\Documentos\\\\GitHub\\\\React-University\\\\Project IV\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\n/* const Gato = (props) =>{\r\n  return( \r\n    <div>\r\n      <h1>Gato</h1>\r\n      <pre>\r\n        {JSON.stringify(props, null, 4)}\r\n      </pre>\r\n    </div>\r\n  )\r\n}\r\n\r\nclass App extends Component {\r\n  state = {\r\n    fuerza: 100,\r\n    vidasRestantes: 7\r\n  }\r\n\r\n  render () {\r\n    const otrosDatos = {\r\n      raza: 'tropical',\r\n      peleasNocturnas: 300\r\n    }\r\n    return (\r\n      <div>\r\n        <Gato \r\n          name='Garfield' \r\n          age='2 años'\r\n          { ...otrosDatos }  \r\n          { ...this.state }\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n} */\n\nclass Boton extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      dispararError: false\n    };\n\n    this.dispatchError = () => {\n      this.setState({\n        dispararError: true\n      });\n    };\n  }\n\n  render() {\n    if (this.state.dispararError) {\n      // en la siguiente linea fuerzo el error, pero cuando esta en produccion debo dejar pagina en blanco para que el usuario no le muestre error\n      throw new Error('Lo siento he fallado');\n    }\n\n    return /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.dispatchError,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 7\n      }\n    }, \"Boton con Bugg\");\n  }\n\n}\n\nclass LimiteErrores extends Component {\n  // esta clase la uso para atrapar todo lo que este dentro de el como un prop, la uso dentro de app\n  render() {\n    return this.props.children;\n  }\n\n}\n\nclass App extends Component {\n  //esto forma parte del ciclo de vida de una funcion donde atrapo al error\n  componentDidCatch() {//aca podria mostrar la vista que se va ha mostrar si existe un error\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(LimiteErrores, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Boton, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/alber/OneDrive/Documentos/GitHub/React-University/Project IV/src/App.js"],"names":["React","Component","Boton","state","dispararError","dispatchError","setState","render","Error","LimiteErrores","props","children","App","componentDidCatch"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA,MAAMC,KAAN,SAAoBD,SAApB,CAA6B;AAAA;AAAA;AAAA,SAC3BE,KAD2B,GACnB;AACNC,MAAAA,aAAa,EAAE;AADT,KADmB;;AAAA,SAK3BC,aAL2B,GAKX,MAAK;AACnB,WAAKC,QAAL,CAAc;AAAEF,QAAAA,aAAa,EAAE;AAAjB,OAAd;AACD,KAP0B;AAAA;;AAS3BG,EAAAA,MAAM,GAAG;AACP,QAAI,KAAKJ,KAAL,CAAWC,aAAf,EAA8B;AAC5B;AACA,YAAM,IAAII,KAAJ,CAAU,sBAAV,CAAN;AACD;;AACD,wBACE;AAAQ,MAAA,OAAO,EAAE,KAAKH,aAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF;AAKD;;AAnB0B;;AAsB7B,MAAMI,aAAN,SAA4BR,SAA5B,CAAqC;AACnC;AACAM,EAAAA,MAAM,GAAG;AACP,WACE,KAAKG,KAAL,CAAWC,QADb;AAGD;;AANkC;;AAQrC,MAAMC,GAAN,SAAkBX,SAAlB,CAA4B;AAC1B;AACAY,EAAAA,iBAAiB,GAAG,CAClB;AACD;;AACDN,EAAAA,MAAM,GAAE;AACN,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,CADF;AAOD;;AAbyB;;AAgB5B,eAAeK,GAAf","sourcesContent":["import React, {Component} from 'react';\r\n\r\n/* const Gato = (props) =>{\r\n  return( \r\n    <div>\r\n      <h1>Gato</h1>\r\n      <pre>\r\n        {JSON.stringify(props, null, 4)}\r\n      </pre>\r\n    </div>\r\n  )\r\n}\r\n\r\nclass App extends Component {\r\n  state = {\r\n    fuerza: 100,\r\n    vidasRestantes: 7\r\n  }\r\n\r\n  render () {\r\n    const otrosDatos = {\r\n      raza: 'tropical',\r\n      peleasNocturnas: 300\r\n    }\r\n    return (\r\n      <div>\r\n        <Gato \r\n          name='Garfield' \r\n          age='2 años'\r\n          { ...otrosDatos }  \r\n          { ...this.state }\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n} */\r\nclass Boton extends Component{\r\n  state = {\r\n    dispararError: false\r\n  }\r\n\r\n  dispatchError = () =>{\r\n    this.setState({ dispararError: true })\r\n  }\r\n\r\n  render() {\r\n    if (this.state.dispararError) {\r\n      // en la siguiente linea fuerzo el error, pero cuando esta en produccion debo dejar pagina en blanco para que el usuario no le muestre error\r\n      throw new Error('Lo siento he fallado')\r\n    }\r\n    return(\r\n      <button onClick={this.dispatchError}>\r\n        Boton con Bugg\r\n      </button>\r\n    )\r\n  }\r\n}\r\n\r\nclass LimiteErrores extends Component{\r\n  // esta clase la uso para atrapar todo lo que este dentro de el como un prop, la uso dentro de app\r\n  render() {\r\n    return(\r\n      this.props.children\r\n    )\r\n  }\r\n}\r\nclass App extends Component {\r\n  //esto forma parte del ciclo de vida de una funcion donde atrapo al error\r\n  componentDidCatch() {\r\n    //aca podria mostrar la vista que se va ha mostrar si existe un error\r\n  }\r\n  render(){\r\n    return(\r\n      <div>\r\n        <LimiteErrores>\r\n          <Boton/>\r\n        </LimiteErrores>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}