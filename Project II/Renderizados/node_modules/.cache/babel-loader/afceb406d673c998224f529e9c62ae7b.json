{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alber\\\\OneDrive\\\\Documentos\\\\GitHub\\\\React-University\\\\Project II\\\\Renderizados\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\n/* const Saludo = (props) =>{\r\n  //puedo hacer un condicional ternario de las siguiente manera\r\n  return (\r\n    <div>\r\n      <div>\r\n        { props.name && <strong>{props.name}</strong>}\r\n      </div>\r\n      {props.saluda ? <h1>Hola, tu eres genial</h1> : <p> Wops, no hay saludo para ti! </p>}\r\n    </div>\r\n  )\r\n}\r\nconst App = () =>{\r\n  return(\r\n    <div>\r\n      <Saludo saluda name='Alberxo'/>\r\n    </div>\r\n  )\r\n} */\n\n/* Inyectando HTML */\n\n/* class App extends Component{\r\n  state = {\r\n\r\n    /* por seguridad react no mostrara el elemento como html, por lo cual cuando queremos realizar esto debemos utilizar una propiedad con un nombre particular que se colocara en el div del render \r\n\r\n    marcado: `\r\n      <h1>Inyectando HTML con React</h1>\r\n      <br/>\r\n      <br/>\r\n      <a href=\"#\">Algun Link</a>\r\n    `\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div\r\n          dangerouslySetInnerHTML={{\r\n            __html: this.state.marcado\r\n          }}\r\n        >\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n} */\n\n/* Introduccion a la prop children */\n// utilizo la destructuracion para que los parametros que paso por title sean mas visibles eliminando el uso de props\n\n/* const Title = ({ uiColor, children }) =>{\r\n  const styles = {\r\n    padding: '0.3em',\r\n    color: '#FFF',\r\n    background: uiColor,\r\n    borderRadius: '0.3em',\r\n    textAlign: 'center',\r\n    fontSize: '50px'\r\n  }\r\n\r\n  return(\r\n    //la prop children hace referencia a los elementos hijos dentro de mi componente cuando separo las tag en dos, es decir, <tag></tag>\r\n      <h1 style={styles}>{children}</h1>\r\n  )\r\n}\r\nclass App extends Component{\r\n  state = {\r\n    uiColor: 'tomato',\r\n  }\r\n  render() {\r\n    const { uiColor } = this.state\r\n    return(\r\n      <div>\r\n        <Title uiColor={uiColor} text='Ahi vamos'>\r\n          Alberto <em>Giffard</em>\r\n        </Title>\r\n      </div>\r\n    )\r\n  }\r\n} */\n\n/* Fragments */\n\n/* lo que nos permite react fragment es evitar que cuando traemos un array tengamos que proporcionar un key unico para cada nodo, lo cual se vuelve tedioso y poco legible ahi entra fragment, la forma de hacerlo es que en la etiqueta donde vayamos a colocar la key escribamos Fragment importandolo al principio asi como Component, y si se tiene la ultima version de babel se puede pasar dejando el tag vacio, es decir <> pero al utilizar esta forma no se le pueden pasar parametros al tag para que react lo logre entender bien */\n\n/* const Computacion = () =>{\r\n  return(\r\n    <>\r\n      <li>Monitor</li>\r\n      <li>Mouse</li>\r\n      <li>Teclado</li>\r\n    </>\r\n  )\r\n}\r\nconst Ropa = () =>{\r\n  return(\r\n    <>\r\n      <li>Playera</li>\r\n      <li>Jeans</li>\r\n      <li>Short</li>\r\n    </>\r\n  )\r\n}\r\nclass App extends Component {\r\n  render() {\r\n    return(\r\n      <div>\r\n        <Computacion/>\r\n        <Ropa/>\r\n      </div>\r\n    )\r\n  }\r\n} */\n\n/* entendiendo los portals */\n//aca cree un div modal en index.html\n\n/* class PortalModal extends Component{\r\n  render () {\r\n    if (!this.props.visible) {\r\n      return(\r\n        null\r\n      )\r\n    }\r\n    const styles = {\r\n      width: '100%',\r\n      height: '100%',\r\n      position: 'absolute',\r\n      top: '0',\r\n      left: '0',\r\n      background: 'linear-gradient(to top right, #667eea, #764ba2',\r\n      opacity: '0.95',\r\n      color: '#FFF'\r\n    }\r\n    //primero va lo que queremos montar y luego en donde lo vamos a montar\r\n    return ReactDOM.createPortal((\r\n      <div style={styles}>\r\n        { this.props.children }\r\n      </div>\r\n    ), document.getElementById('modal-root'))\r\n  }\r\n}\r\nclass App extends Component{\r\n  state = {\r\n    visible: false,\r\n    num: 0\r\n  }\r\n  componentDidMount () {\r\n    setInterval(() =>{\r\n      this.setState(state =>({\r\n        num: state.num + 1\r\n      }))\r\n    }, 1000)\r\n  }\r\n\r\n  mostrar = () =>{\r\n    this.setState({ visible: true })\r\n  }\r\n\r\n  cerrar = () =>{\r\n    this.setState({ visible: false })\r\n  }\r\n  render() {\r\n    return(\r\n      <div>\r\n        <button onClick={this.mostrar}>\r\n          Mostrar\r\n        </button>\r\n        <PortalModal visible={this.state.visible} >\r\n          <button onClick={this.cerrar}>\r\n            Cerrar\r\n          </button>\r\n          <h1>\r\n            Hola desde un portal modal { this.state.num}\r\n          </h1>\r\n        </PortalModal>\r\n      </div>\r\n    )\r\n  }\r\n} */\n\n/* Controlar datos de entrada con proptypes */\n\nclass Profile extends Component {\n  //se interpone la palabra static ya que proptype es estatico\n  render() {\n    //traigo las props con destructuraciÃ³n\n    const {\n      name,\n      bio,\n      mail\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }\n    }, name), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }\n    }, bio), /*#__PURE__*/React.createElement(\"a\", {\n      href: `mailto:${mail}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }\n    }, mail));\n  }\n\n}\n\nProfile.propTypes = {\n  //le pasamos el tipo de datos que esperamos, por ejemplo en la siguiente linea le decimos que esperamos un string\n  //le podemos pasar isrequired si es necesario pasar este prop para que no arroje error\n  name: PropTypes.string.isRequired,\n  bio: PropTypes.string,\n  mail: PropTypes.string,\n  age: PropTypes.number\n};\n\nclass App extends Component {\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Profile, {\n      name: \"Junior Prueba\",\n      bio: \"Soy un objeto de prueba\",\n      mail: \"pruebame@gmail.com\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/alber/OneDrive/Documentos/GitHub/React-University/Project II/Renderizados/src/App.js"],"names":["React","Component","ReactDOM","PropTypes","Profile","render","name","bio","mail","props","propTypes","string","isRequired","age","number","App"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA;;;;;;;;;;;;;;;;;;;AAmBA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA;;AAEA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgEA;;AACA,MAAMC,OAAN,SAAsBH,SAAtB,CAA+B;AAC7B;AAYAI,EAAAA,MAAM,GAAG;AACP;AACA,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA,GAAR;AAAaC,MAAAA;AAAb,QAAsB,KAAKC,KAAjC;AACA,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKH,IAAL,CADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGC,GADH,CAFF,eAKE;AAAG,MAAA,IAAI,EAAG,UAASC,IAAK,EAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGA,IADH,CALF,CADF;AAWD;;AA3B4B;;AAAzBJ,O,CAEGM,S,GAAY;AACjB;AAEA;AACAJ,EAAAA,IAAI,EAAEH,SAAS,CAACQ,MAAV,CAAiBC,UAJN;AAKjBL,EAAAA,GAAG,EAAEJ,SAAS,CAACQ,MALE;AAMjBH,EAAAA,IAAI,EAAEL,SAAS,CAACQ,MANC;AAOjBE,EAAAA,GAAG,EAAEV,SAAS,CAACW;AAPE,C;;AA2BrB,MAAMC,GAAN,SAAkBd,SAAlB,CAA2B;AACzBI,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,OAAD;AACE,MAAA,IAAI,EAAC,eADP;AAEE,MAAA,GAAG,EAAC,yBAFN;AAGE,MAAA,IAAI,EAAC,oBAHP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AASD;;AAXwB;;AAa3B,eAAeU,GAAf","sourcesContent":["import React, {Component} from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport PropTypes from 'prop-types';\r\n\r\n/* const Saludo = (props) =>{\r\n  //puedo hacer un condicional ternario de las siguiente manera\r\n  return (\r\n    <div>\r\n      <div>\r\n        { props.name && <strong>{props.name}</strong>}\r\n      </div>\r\n      {props.saluda ? <h1>Hola, tu eres genial</h1> : <p> Wops, no hay saludo para ti! </p>}\r\n    </div>\r\n  )\r\n}\r\nconst App = () =>{\r\n  return(\r\n    <div>\r\n      <Saludo saluda name='Alberxo'/>\r\n    </div>\r\n  )\r\n} */\r\n\r\n/* Inyectando HTML */\r\n/* class App extends Component{\r\n  state = {\r\n\r\n    /* por seguridad react no mostrara el elemento como html, por lo cual cuando queremos realizar esto debemos utilizar una propiedad con un nombre particular que se colocara en el div del render \r\n\r\n    marcado: `\r\n      <h1>Inyectando HTML con React</h1>\r\n      <br/>\r\n      <br/>\r\n      <a href=\"#\">Algun Link</a>\r\n    `\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div\r\n          dangerouslySetInnerHTML={{\r\n            __html: this.state.marcado\r\n          }}\r\n        >\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n} */\r\n\r\n/* Introduccion a la prop children */\r\n// utilizo la destructuracion para que los parametros que paso por title sean mas visibles eliminando el uso de props\r\n/* const Title = ({ uiColor, children }) =>{\r\n  const styles = {\r\n    padding: '0.3em',\r\n    color: '#FFF',\r\n    background: uiColor,\r\n    borderRadius: '0.3em',\r\n    textAlign: 'center',\r\n    fontSize: '50px'\r\n  }\r\n\r\n  return(\r\n    //la prop children hace referencia a los elementos hijos dentro de mi componente cuando separo las tag en dos, es decir, <tag></tag>\r\n      <h1 style={styles}>{children}</h1>\r\n  )\r\n}\r\nclass App extends Component{\r\n  state = {\r\n    uiColor: 'tomato',\r\n  }\r\n  render() {\r\n    const { uiColor } = this.state\r\n    return(\r\n      <div>\r\n        <Title uiColor={uiColor} text='Ahi vamos'>\r\n          Alberto <em>Giffard</em>\r\n        </Title>\r\n      </div>\r\n    )\r\n  }\r\n} */\r\n\r\n/* Fragments */\r\n\r\n/* lo que nos permite react fragment es evitar que cuando traemos un array tengamos que proporcionar un key unico para cada nodo, lo cual se vuelve tedioso y poco legible ahi entra fragment, la forma de hacerlo es que en la etiqueta donde vayamos a colocar la key escribamos Fragment importandolo al principio asi como Component, y si se tiene la ultima version de babel se puede pasar dejando el tag vacio, es decir <> pero al utilizar esta forma no se le pueden pasar parametros al tag para que react lo logre entender bien */\r\n\r\n/* const Computacion = () =>{\r\n  return(\r\n    <>\r\n      <li>Monitor</li>\r\n      <li>Mouse</li>\r\n      <li>Teclado</li>\r\n    </>\r\n  )\r\n}\r\nconst Ropa = () =>{\r\n  return(\r\n    <>\r\n      <li>Playera</li>\r\n      <li>Jeans</li>\r\n      <li>Short</li>\r\n    </>\r\n  )\r\n}\r\nclass App extends Component {\r\n  render() {\r\n    return(\r\n      <div>\r\n        <Computacion/>\r\n        <Ropa/>\r\n      </div>\r\n    )\r\n  }\r\n} */\r\n\r\n/* entendiendo los portals */\r\n//aca cree un div modal en index.html\r\n/* class PortalModal extends Component{\r\n  render () {\r\n    if (!this.props.visible) {\r\n      return(\r\n        null\r\n      )\r\n    }\r\n    const styles = {\r\n      width: '100%',\r\n      height: '100%',\r\n      position: 'absolute',\r\n      top: '0',\r\n      left: '0',\r\n      background: 'linear-gradient(to top right, #667eea, #764ba2',\r\n      opacity: '0.95',\r\n      color: '#FFF'\r\n    }\r\n    //primero va lo que queremos montar y luego en donde lo vamos a montar\r\n    return ReactDOM.createPortal((\r\n      <div style={styles}>\r\n        { this.props.children }\r\n      </div>\r\n    ), document.getElementById('modal-root'))\r\n  }\r\n}\r\nclass App extends Component{\r\n  state = {\r\n    visible: false,\r\n    num: 0\r\n  }\r\n  componentDidMount () {\r\n    setInterval(() =>{\r\n      this.setState(state =>({\r\n        num: state.num + 1\r\n      }))\r\n    }, 1000)\r\n  }\r\n\r\n  mostrar = () =>{\r\n    this.setState({ visible: true })\r\n  }\r\n\r\n  cerrar = () =>{\r\n    this.setState({ visible: false })\r\n  }\r\n  render() {\r\n    return(\r\n      <div>\r\n        <button onClick={this.mostrar}>\r\n          Mostrar\r\n        </button>\r\n        <PortalModal visible={this.state.visible} >\r\n          <button onClick={this.cerrar}>\r\n            Cerrar\r\n          </button>\r\n          <h1>\r\n            Hola desde un portal modal { this.state.num}\r\n          </h1>\r\n        </PortalModal>\r\n      </div>\r\n    )\r\n  }\r\n} */\r\n\r\n/* Controlar datos de entrada con proptypes */\r\nclass Profile extends Component{\r\n  //se interpone la palabra static ya que proptype es estatico\r\n  static propTypes = {\r\n    //le pasamos el tipo de datos que esperamos, por ejemplo en la siguiente linea le decimos que esperamos un string\r\n\r\n    //le podemos pasar isrequired si es necesario pasar este prop para que no arroje error\r\n    name: PropTypes.string.isRequired,\r\n    bio: PropTypes.string,\r\n    mail: PropTypes.string,\r\n    age: PropTypes.number,\r\n  }\r\n  \r\n  \r\n  render() {\r\n    //traigo las props con destructuraciÃ³n\r\n    const { name, bio, mail } = this.props;\r\n    return(\r\n      <div>\r\n        <h1>{name}</h1>\r\n        <p>\r\n          {bio}\r\n        </p>\r\n        <a href={`mailto:${mail}`}>\r\n          {mail}  \r\n        </a> \r\n      </div>\r\n    )\r\n  }\r\n}\r\nclass App extends Component{\r\n  render() {\r\n    return(\r\n      <div>\r\n        <Profile\r\n          name='Junior Prueba'\r\n          bio='Soy un objeto de prueba'\r\n          mail='pruebame@gmail.com'\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default App;"]},"metadata":{},"sourceType":"module"}