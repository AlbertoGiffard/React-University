{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alber\\\\OneDrive\\\\Documentos\\\\GitHub\\\\React-University\\\\Project II\\\\Renderizados\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport { unmountComponentAtNode } from 'react-dom';\n/* const Saludo = (props) =>{\r\n  //puedo hacer un condicional ternario de las siguiente manera\r\n  return (\r\n    <div>\r\n      <div>\r\n        { props.name && <strong>{props.name}</strong>}\r\n      </div>\r\n      {props.saluda ? <h1>Hola, tu eres genial</h1> : <p> Wops, no hay saludo para ti! </p>}\r\n    </div>\r\n  )\r\n}\r\nconst App = () =>{\r\n  return(\r\n    <div>\r\n      <Saludo saluda name='Alberxo'/>\r\n    </div>\r\n  )\r\n} */\n\n/* Inyectando HTML */\n\n/* class App extends Component{\r\n  state = {\r\n\r\n    /* por seguridad react no mostrara el elemento como html, por lo cual cuando queremos realizar esto debemos utilizar una propiedad con un nombre particular que se colocara en el div del render \r\n\r\n    marcado: `\r\n      <h1>Inyectando HTML con React</h1>\r\n      <br/>\r\n      <br/>\r\n      <a href=\"#\">Algun Link</a>\r\n    `\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div\r\n          dangerouslySetInnerHTML={{\r\n            __html: this.state.marcado\r\n          }}\r\n        >\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n} */\n\n/* Introduccion a la prop children */\n// utilizo la destructuracion para que los parametros que paso por title sean mas visibles eliminando el uso de props\n\n/* const Title = ({ uiColor, children }) =>{\r\n  const styles = {\r\n    padding: '0.3em',\r\n    color: '#FFF',\r\n    background: uiColor,\r\n    borderRadius: '0.3em',\r\n    textAlign: 'center',\r\n    fontSize: '50px'\r\n  }\r\n\r\n  return(\r\n    //la prop children hace referencia a los elementos hijos dentro de mi componente cuando separo las tag en dos, es decir, <tag></tag>\r\n      <h1 style={styles}>{children}</h1>\r\n  )\r\n}\r\nclass App extends Component{\r\n  state = {\r\n    uiColor: 'tomato',\r\n  }\r\n  render() {\r\n    const { uiColor } = this.state\r\n    return(\r\n      <div>\r\n        <Title uiColor={uiColor} text='Ahi vamos'>\r\n          Alberto <em>Giffard</em>\r\n        </Title>\r\n      </div>\r\n    )\r\n  }\r\n} */\n\n/* Fragments */\n\n/* lo que nos permite react fragment es evitar que cuando traemos un array tengamos que proporcionar un key unico para cada nodo, lo cual se vuelve tedioso y poco legible ahi entra fragment, la forma de hacerlo es que en al etiqueta donde vayamos a colocar la key escribamos Fragment importandolo al principio asi como Component, y si se tiene la ultima version de babel se puede pasar dejando el tag vacio, es decir <> pero al utilizar esta forma no se le pueden pasar parametros al tag para que react lo logre entender bien */\n\nconst Computacion = () => {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }, \"Monitor\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }, \"Mouse\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }, \"Teclado\"));\n};\n\nconst Ropa = () => {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }, \"Playera\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }, \"Jeans\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }\n  }, \"Short\"));\n};\n\nclass App extends Component {\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Computacion, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Ropa, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/alber/OneDrive/Documentos/GitHub/React-University/Project II/Renderizados/src/App.js"],"names":["React","Component","unmountComponentAtNode","Computacion","Ropa","App","render"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAASC,sBAAT,QAAuC,WAAvC;AAEA;;;;;;;;;;;;;;;;;;;AAmBA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA;;AAEA;;AAEA,MAAMC,WAAW,GAAG,MAAK;AACvB,sBACE,uDACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAHF,CADF;AAOD,CARD;;AASA,MAAMC,IAAI,GAAG,MAAK;AAChB,sBACE,uDACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAHF,CADF;AAOD,CARD;;AASA,MAAMC,GAAN,SAAkBJ,SAAlB,CAA4B;AAC1BK,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAEE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF;AAMD;;AARyB;;AAU5B,eAAeD,GAAf","sourcesContent":["import React, {Component} from 'react';\r\nimport { unmountComponentAtNode } from 'react-dom';\r\n\r\n/* const Saludo = (props) =>{\r\n  //puedo hacer un condicional ternario de las siguiente manera\r\n  return (\r\n    <div>\r\n      <div>\r\n        { props.name && <strong>{props.name}</strong>}\r\n      </div>\r\n      {props.saluda ? <h1>Hola, tu eres genial</h1> : <p> Wops, no hay saludo para ti! </p>}\r\n    </div>\r\n  )\r\n}\r\nconst App = () =>{\r\n  return(\r\n    <div>\r\n      <Saludo saluda name='Alberxo'/>\r\n    </div>\r\n  )\r\n} */\r\n\r\n/* Inyectando HTML */\r\n/* class App extends Component{\r\n  state = {\r\n\r\n    /* por seguridad react no mostrara el elemento como html, por lo cual cuando queremos realizar esto debemos utilizar una propiedad con un nombre particular que se colocara en el div del render \r\n\r\n    marcado: `\r\n      <h1>Inyectando HTML con React</h1>\r\n      <br/>\r\n      <br/>\r\n      <a href=\"#\">Algun Link</a>\r\n    `\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div\r\n          dangerouslySetInnerHTML={{\r\n            __html: this.state.marcado\r\n          }}\r\n        >\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n} */\r\n\r\n/* Introduccion a la prop children */\r\n// utilizo la destructuracion para que los parametros que paso por title sean mas visibles eliminando el uso de props\r\n/* const Title = ({ uiColor, children }) =>{\r\n  const styles = {\r\n    padding: '0.3em',\r\n    color: '#FFF',\r\n    background: uiColor,\r\n    borderRadius: '0.3em',\r\n    textAlign: 'center',\r\n    fontSize: '50px'\r\n  }\r\n\r\n  return(\r\n    //la prop children hace referencia a los elementos hijos dentro de mi componente cuando separo las tag en dos, es decir, <tag></tag>\r\n      <h1 style={styles}>{children}</h1>\r\n  )\r\n}\r\nclass App extends Component{\r\n  state = {\r\n    uiColor: 'tomato',\r\n  }\r\n  render() {\r\n    const { uiColor } = this.state\r\n    return(\r\n      <div>\r\n        <Title uiColor={uiColor} text='Ahi vamos'>\r\n          Alberto <em>Giffard</em>\r\n        </Title>\r\n      </div>\r\n    )\r\n  }\r\n} */\r\n\r\n/* Fragments */\r\n\r\n/* lo que nos permite react fragment es evitar que cuando traemos un array tengamos que proporcionar un key unico para cada nodo, lo cual se vuelve tedioso y poco legible ahi entra fragment, la forma de hacerlo es que en al etiqueta donde vayamos a colocar la key escribamos Fragment importandolo al principio asi como Component, y si se tiene la ultima version de babel se puede pasar dejando el tag vacio, es decir <> pero al utilizar esta forma no se le pueden pasar parametros al tag para que react lo logre entender bien */\r\n\r\nconst Computacion = () =>{\r\n  return(\r\n    <>\r\n      <li>Monitor</li>\r\n      <li>Mouse</li>\r\n      <li>Teclado</li>\r\n    </>\r\n  )\r\n}\r\nconst Ropa = () =>{\r\n  return(\r\n    <>\r\n      <li>Playera</li>\r\n      <li>Jeans</li>\r\n      <li>Short</li>\r\n    </>\r\n  )\r\n}\r\nclass App extends Component {\r\n  render() {\r\n    return(\r\n      <div>\r\n        <Computacion/>\r\n        <Ropa/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default App;"]},"metadata":{},"sourceType":"module"}