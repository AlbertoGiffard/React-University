{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alber\\\\OneDrive\\\\Documentos\\\\GitHub\\\\React-University\\\\Project III\\\\src\\\\App.js\";\nimport React, { Component, forwardRef } from 'react';\n/* import './App.css'\r\nimport Chart from 'chart.js'; */\n\n/* Iteraciones */\n\n/* const frutas = [\r\n  'fresa',\r\n  'manzana',\r\n  'sandia',\r\n  'kiwi',\r\n  'durazno',\r\n  'mango',\r\n  'piña'\r\n]\r\n\r\nclass App extends Component {\r\n  render () {\r\n    return (\r\n      <div>\r\n        <ul>\r\n          {frutas.map((fruta) =>{\r\n            return(\r\n            <li>{fruta}</li>\r\n            )\r\n          })}\r\n        </ul>\r\n      </div>\r\n    )\r\n  }\r\n} */\n\n/* Iteracion con diferentes elementos */\n\n/* class App extends Component{\r\n  state = {\r\n    products: [\r\n      {\r\n        id: 1,\r\n        name: 'camisa unicornio',\r\n        colors: ['#467367', '#05fd88', '#a706ee'],\r\n        price: 20\r\n      },\r\n      {\r\n        id: 2,\r\n        name: 'jeans',\r\n        colors: ['#d35eff','#9956e8', '#876bff', '#5662e8'],\r\n        price: 32\r\n      },\r\n      {\r\n        id: 3,\r\n        name: 'taza',\r\n        colors: ['#d35eff','#9956e8', '#876bff', '#5662e8'],\r\n        price: 20\r\n      },\r\n      {\r\n        id: 4,\r\n        name: 'camisa icecream',\r\n        colors: ['#2544b3','#ff8a69', '#5076ff', '#7fcc2b', '#73b32e'],\r\n        price: 20\r\n      },\r\n      {\r\n        id: 5,\r\n        name: 'camisa dragon',\r\n        colors: ['#b32542','#ff6987', '#ff4f73', '#14b32e', '#5eff78'],\r\n        price: 20\r\n      }\r\n    ]\r\n  }\r\n  render() {\r\n    return(\r\n      <div>\r\n        <h3>\r\n          Iterando lista de objetos\r\n        </h3>\r\n        <div>\r\n          {this.state.products.map((product) =>{\r\n            return(\r\n              <div>\r\n                $ {product.price} - {product.name}\r\n\r\n                {/* aca voy hacer un map anidado para recorrer colors, que es un array de string}\r\n                <div>\r\n                  {product.colors.map((color) =>{\r\n                    return(\r\n                      <span\r\n                        style = {{\r\n                          width: '13px',\r\n                          height: '13px',\r\n                          borderRadius: '0.1em',\r\n                          border: '1px solid gray',\r\n                          display: 'inline-block',\r\n                          margin: '0.1em',\r\n                          background: color\r\n                        }}\r\n                      >\r\n                      </span>\r\n                    )\r\n                  })}\r\n                </div>\r\n              </div>\r\n            )\r\n          })}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n} */\n\n/* Iterando propiedades de objetos */\n\n/* class App extends Component{\r\n  state = {\r\n    user: {\r\n      name: 'Junior Prueba',\r\n      country: 'Jamaica',\r\n      twitter: '@Chunior',\r\n      youtube: 'Testing'\r\n    }\r\n  }\r\n  render() {\r\n    const { user } = this.state\r\n    const keys = Object.keys(user) //me trae los nombre de los atributos => [ 'name', 'country', 'twitter', 'youtube' ]\r\n    return(\r\n      <div>\r\n        <h3>Iterando propiedades de objetos</h3>\r\n        <ul>\r\n          {keys.map((key) =>(\r\n            <li>\r\n              <strong>{ key }:</strong> { user[key] }\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    )\r\n  }\r\n} */\n\n/* prop key al iterar listas con React */\n\n/* const users = [\r\n  { id: 1, name: 'Gerado Gallegos', country: 'Mexico'},\r\n  { id: 2, name: 'Leanne Graham', country: 'USA'},\r\n  { id: 3, name: 'Ervin Howell', country: 'Colombia'},\r\n  { id: 4, name: 'Rodrigo Fernandez', country: 'Peru'},\r\n  { id: 5, name: 'Alfredo Bauch', country: 'Guatemala'},\r\n  { id: 6, name: 'Fernanda Valencia', country: 'España'}\r\n]\r\n\r\nclass App extends Component {\r\n  render () {\r\n    return (\r\n      <div>\r\n        <h1>Iterando</h1>\r\n        <ul>\r\n          {users.map((user, index) => (\r\n            <li key={index + user.name}>\r\n              { user.name }\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    )\r\n  }\r\n} */\n\n/* Iteracion de componentes */\n\n/* const images = [{\r\n  author: {\r\n    name: 'Vlad Bagacian',\r\n    avatar: 'https://images.pexels.com/users/avatars/381880/vlad-bagacian-302.jpeg?w=256&h=256&fit=crop&crop=faces'\r\n  },\r\n  source: 'https://images.pexels.com/photos/1368388/pexels-photo-1368388.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=400',\r\n  views: 153,\r\n  id: 1\r\n},\r\n{\r\n  author: {\r\n    name: 'Moreno Matković',\r\n    avatar: 'https://images.pexels.com/users/avatars/1265479/moreno-matkovic-149.jpeg?w=256&h=256&fit=crop&crop=faces'\r\n  },\r\n  source: 'https://images.pexels.com/photos/2779539/pexels-photo-2779539.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=400',\r\n  views: 214,\r\n  id: 2\r\n},\r\n{\r\n  author: {\r\n    name: 'Jarod Lovekamp',\r\n    avatar: 'https://images.pexels.com/users/avatars/1263347/jarod-lovekamp-411.jpeg?w=256&h=256&fit=crop&crop=faces'\r\n  },\r\n  source: 'https://images.pexels.com/photos/2404444/pexels-photo-2404444.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=400',\r\n  views: 985,\r\n  id: 3\r\n},\r\n{\r\n  author: {\r\n    name: 'Xandro Vandewalle',\r\n    avatar: 'https://images.pexels.com/users/avatars/1431801/xandro-vandewalle-530.jpeg?w=256&h=256&fit=crop&crop=faces'\r\n  },\r\n  source: 'https://images.pexels.com/photos/2763239/pexels-photo-2763239.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=400',\r\n  views: 124,\r\n  id: 4\r\n},\r\n{\r\n  author: {\r\n    name: 'Two Dreamers',\r\n    avatar: 'https://images.pexels.com/users/avatars/1190917/two-dreamers-438.jpeg?w=256&h=256&fit=crop&crop=faces'\r\n  },\r\n  source: 'https://images.pexels.com/photos/2717087/pexels-photo-2717087.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=400',\r\n  views: 987,\r\n  id: 5\r\n},\r\n{\r\n  author: {\r\n    name: 'Luis Quintero',\r\n    avatar: 'https://images.pexels.com/users/avatars/447123/luis-quintero-294.jpeg?w=256&h=256&fit=crop&crop=faces'\r\n  },\r\n  source: 'https://images.pexels.com/photos/1408196/pexels-photo-1408196.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=400',\r\n  views: 147,\r\n  id: 6\r\n},\r\n{\r\n  author: {\r\n    name: 'Tobias Bjørkli',\r\n    avatar: 'https://images.pexels.com/users/avatars/706370/tobias-bjorkli-371.jpeg?w=256&h=256&fit=crop&crop=faces'\r\n  },\r\n  source: 'https://images.pexels.com/photos/1940041/pexels-photo-1940041.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=400',\r\n  views: 387,\r\n  id: 7\r\n},\r\n{\r\n  author: {\r\n    name: 'Renato Abati',\r\n    avatar: 'https://images.pexels.com/users/avatars/963082/renato-abati-706.jpeg?w=256&h=256&fit=crop&crop=faces'\r\n  },\r\n  source: 'https://images.pexels.com/photos/2768877/pexels-photo-2768877.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=400',\r\n  views: 143,\r\n  id: 8\r\n},\r\n{\r\n  author: {\r\n    name: 'Vlad Bagacian',\r\n    avatar: 'https://images.pexels.com/users/avatars/381880/vlad-bagacian-302.jpeg?w=256&h=256&fit=crop&crop=faces'\r\n  },\r\n  source: 'https://images.pexels.com/photos/1368388/pexels-photo-1368388.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=400',\r\n  views: 721,\r\n  id: 9\r\n},\r\n{\r\n  author: {\r\n    name: 'Brayden Law',\r\n    avatar: 'https://images.pexels.com/users/avatars/851295/brayden-law-840.jpeg?w=256&h=256&fit=crop&crop=faces'\r\n  },\r\n  source: 'https://images.pexels.com/photos/1829191/pexels-photo-1829191.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=400',\r\n  views: 637,\r\n  id: 10\r\n}]\r\n\r\nconst Image = ({ image }) =>{\r\n  return(\r\n    <div className='card'>\r\n      <img\r\n        src={image.source}\r\n        alt='Imagen'\r\n        className='image'\r\n      />\r\n      <div className='footer'>\r\n        <img\r\n          src={image.author.avatar}\r\n          alt='Avatar'\r\n          className='avatar'\r\n        />\r\n        <div>\r\n          {image.author.name}\r\n        </div>\r\n        <div>\r\n          {image.views}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className='images'>\r\n        {/* para iterar el array de images uso esto \r\n        {images.map((image) => (\r\n          <Image \r\n            image={image}\r\n            key={image.id}  \r\n          />\r\n        ))}\r\n      </div>\r\n    )\r\n  }\r\n} */\n\n/* pasar datos al iterar listas con react */\n\n/* class App extends Component{\r\n  state = {\r\n    fruits: [\r\n      { name: 'Fresa', price: 5.4 },\r\n      { name: 'Manzana', price: 2.3 },\r\n      { name: 'Sandia', price: 1.2 },\r\n      { name: 'Guayaba', price: 5 },\r\n      { name: 'Pera', price: 4.12 },\r\n      { name: 'Kiwi', price: 3.87 },\r\n      { name: 'Limon', price: 7.21 },\r\n      { name: 'Melon', price: 6.21 },\r\n      { name: 'Cereza', price: 4.98 }\r\n    ],\r\n\r\n    frutaSeleccionada: {}\r\n  }\r\n  select = (frutaSeleccionada, event) =>{\r\n    this.setState({\r\n      frutaSeleccionada\r\n    })\r\n    \r\n  }\r\n  render() {\r\n    const { fruits } = this.state;\r\n    return (\r\n      <ul>\r\n        {fruits.map((fruit) =>(\r\n          <li \r\n            key={fruit.name}\r\n            onClick={this.select.bind(this, fruit)}\r\n            style={{\r\n              color: this.state.frutaSeleccionada.name === fruit.name ? 'red' : '#000'\r\n            }}\r\n          >\r\n            {fruit.name} - $ {fruit.price}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    )\r\n  }\r\n} */\n\n/* Referencias o refs con React */\n\n/* class Entrada extends Component{\r\n  constructor() {\r\n    super()\r\n\r\n    //aca dentro del constructor tenemos que llamar al metodo de react createRef\r\n    this.entrada = React.createRef()\r\n  }\r\n  //la siguiente funcion es parte del ciclo de vida de una funcion, esta funcion se ejecuta cuando el componente es montado\r\n  componentDidMount(){\r\n\r\n  }\r\n\r\n  focus = () =>{\r\n    //aca con la siguiente linea hace foco al campo input\r\n    this.entrada.current.focus()\r\n    \r\n  }\r\n\r\n  blur = () =>{\r\n    //en la siguiente linea elimina el foco del elemento referenciado\r\n    this.entrada.current.blur()\r\n  }\r\n  render() {\r\n    return(\r\n      <div>\r\n        {/* //le colocamos ref como propiedad al tag que queremos hacer referencia \r\n        <input type=\"text\" ref={this.entrada}/>\r\n        <button onClick={this.focus}>\r\n          Focus\r\n        </button>\r\n        <button onClick={this.blur}>\r\n          Blur\r\n        </button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nclass App extends Component{\r\n  render() {\r\n    return(\r\n      <div>\r\n        <h1>\r\n          React refs\r\n        </h1>\r\n        <Entrada/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n */\n\n/* Integrar librerias de terceros usando las refs de React */\n// las graficas se sacaron de chart.js se instalan con npm y luego la importo al principio \n\n/* class Graficas extends Component{\r\n  // hago referencia al ref\r\n  grafica = React.createRef();\r\n  componentDidMount() {\r\n    //cambio var por const ya que son constantes porque nunca van a variar\r\n    //elimino el getelementbyid por this.grafica.current para acceder al contenido del tag canvas\r\n    const ctx = this.grafica.current.getContext('2d');\r\n    const myChart = new Chart(ctx, {\r\n      type: 'bar',\r\n      data: {\r\n          labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],\r\n          datasets: [{\r\n              label: '# of Votes',\r\n              data: [12, 19, 3, 5, 2, 3],\r\n              backgroundColor: [\r\n                  'rgba(255, 99, 132, 0.2)',\r\n                  'rgba(54, 162, 235, 0.2)',\r\n                  'rgba(255, 206, 86, 0.2)',\r\n                  'rgba(75, 192, 192, 0.2)',\r\n                  'rgba(153, 102, 255, 0.2)',\r\n                  'rgba(255, 159, 64, 0.2)'\r\n              ],\r\n              borderColor: [\r\n                  'rgba(255, 99, 132, 1)',\r\n                  'rgba(54, 162, 235, 1)',\r\n                  'rgba(255, 206, 86, 1)',\r\n                  'rgba(75, 192, 192, 1)',\r\n                  'rgba(153, 102, 255, 1)',\r\n                  'rgba(255, 159, 64, 1)'\r\n              ],\r\n              borderWidth: 1\r\n          }]\r\n      },\r\n      options: {\r\n          scales: {\r\n              yAxes: [{\r\n                  ticks: {\r\n                      beginAtZero: true\r\n                  }\r\n              }]\r\n          }\r\n      }\r\n  });\r\n  }\r\n  render() {\r\n    return(\r\n      <div>\r\n        <canvas\r\n        //hago la refencia a este tag\r\n          ref={this.grafica}\r\n          width=\"400\"\r\n          height=\"400\"\r\n        >\r\n\r\n        </canvas>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass App extends Component{\r\n  render() {\r\n    return(\r\n      <div>\r\n        <h1>Usando refs</h1>\r\n        <Graficas/>\r\n      </div>\r\n    )\r\n  }\r\n} */\n\n/* reenvio de la prop especial ref con forwardRef */\n//sirve para reenviar la ref del padre al hijo\n\n/* const FancyInput = React.forwardRef((props, ref) =>(\r\n  <div>\r\n    <input type=\"text\" ref={ref}/>\r\n  </div>\r\n))\r\nclass App extends Component{\r\n  entrada = React.createRef()\r\n\r\n  componentDidMount(){\r\n    console.log(this.entrada);\r\n    \r\n  }\r\n  render() {\r\n    return(\r\n      <div>\r\n        <h1>Reenvio de refs</h1>\r\n        <FancyInput ref={this.entrada}/>\r\n      </div>\r\n    )\r\n  }\r\n}  */\n\n/* manejando inputs no controlados con refs */\n\n/* const Unicorn = () =>{\r\n  return(\r\n    <span>\r\n      Imagen\r\n    </span>\r\n  )\r\n}\r\n\r\nclass InputNoControlado extends Component{\r\n\r\n\r\n  handleSubmit = (e) =>{\r\n    //aca obtengo los valores del ref de la siguiente forma\r\n    // no olvidar el current.value para obtener el valor\r\n\r\n    //respecto a los inputs controlados, cuando le pase el evento(e) como paremetro al ser un form, le puedo pasar .target y el valor que pase dentro de los [] indica cual de los input va a tomar, es decir, si paso e.target[0] este me tomaria el primer input del form\r\n    //paso preventdefault para que no recargue la pagina y se puedan quedar los cambios guardados\r\n    e.preventDefault()\r\n    const nombre = e.target[0].value\r\n    const email = e.target[1].value\r\n    //manejo de datos\r\n    this.props.onSend({nombre, email})\r\n  }\r\n  render(){\r\n    return(\r\n      <form onSubmit={this.handleSubmit}>\r\n        <input type=\"text\" placeholder='Nombre'/>\r\n        <input type=\"text\" placeholder='Email'/>\r\n        <button>\r\n          Enviar\r\n        </button>\r\n      </form>\r\n    )\r\n  }\r\n}\r\nclass App extends Component{\r\n  send = (data) =>{\r\n    console.log(data);\r\n    \r\n  }\r\n  render() {\r\n    return(\r\n      <div>\r\n        <h1>\r\n          Inputs no controlados refs <Unicorn/>\r\n        </h1>\r\n        <InputNoControlado\r\n          onSend={this.send}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n} */\n\n/* Ventajas y desventajas de inputs controlados y no controlados */\n\n/* en los inputs no controlados su sintaxis se parece mas a html puro, el cual lo hace mas visible de visualizar, tiene en desventaja que la informacion que suministre el usuario solo podra ser revisada cuando el usuario la envie, antes de esto no se podra corregir o modificar */\n\n/* Inputs controlados */\n\n/* class InputControlado extends Component{\r\n  state = {\r\n    text: '',\r\n    tieneError: false,\r\n    color: '#E8E8E8'\r\n  }\r\n\r\n  actualizar = (e) =>{\r\n    const text= e.target.value\r\n    const tieneError = text !== '' && text.length < 5\r\n    //le coloco let ya que este si va ha variar\r\n    let color = 'green'\r\n    //trim limpia los espacios en blanco al principio y al final\r\n    if (text.trim() === ''){\r\n      color= '#E8E8E8'\r\n    }\r\n\r\n    if (text.trim() !== '' && text.trim().length < 5){\r\n      color= 'red'\r\n    }\r\n\r\n    this.setState({ text, color })\r\n    \r\n    //propagando datos al padre\r\n    this.props.onChange(this.props.name, text)\r\n  }\r\n\r\n  render() {\r\n    const styles = {\r\n      border: `1px solid ${this.state.color}`,\r\n      padding: '0.3em 0.6em',\r\n      outline: 'none'\r\n    }\r\n    return(\r\n      <input \r\n        type=\"text\"\r\n        value={this.state.text}\r\n        onChange={this.actualizar}\r\n        style={styles}\r\n        placeholder={this.props.placeholder}\r\n      />\r\n    )\r\n  }\r\n}\r\nclass App extends Component{\r\n  state = {\r\n    name: '',\r\n    email: ''\r\n  }\r\n  actualizar = (name, text) =>{\r\n    this.setState({\r\n      [name]: text\r\n    })\r\n    \r\n  }\r\n  render() {\r\n    return(\r\n      <div>\r\n        <h1>Inputs Controlados</h1>\r\n        <InputControlado\r\n          onChange={this.actualizar}\r\n          placeholder='Nombre Completo'\r\n          //le paso este valor para que sea reutilizable el codigo y asi no tener que repetir codigo para recibir los distintos parametros\r\n          name='name'\r\n        />\r\n        <InputControlado\r\n          onChange={this.actualizar}\r\n          placeholder='Tu Email'\r\n          name='email'\r\n        />\r\n        <h2>\r\n          Nombre: {this.state.name}\r\n        </h2>\r\n        <h2>\r\n          Email: {this.state.email}\r\n        </h2>\r\n      </div>\r\n    )\r\n  }\r\n} */\n\n/* usando el atributo for en formularios */\n\n/* class InputNoControlado extends Component{\r\n  render() {\r\n    return(\r\n      <form onSubmit={this.handleSubmit}>\r\n        <p>\r\n          <label htmlFor='name'>Nombre:</label>\r\n          <input \r\n            type=\"text\"\r\n            placeholder='Nombre'\r\n            id='name'\r\n          />\r\n        </p>\r\n        <p>\r\n          <label htmlFor='email'>E-mail:</label>\r\n          <input \r\n            type=\"text\"\r\n            placeholder='Email'\r\n            id='email'\r\n          />\r\n        </p>\r\n        <button>\r\n          Enviar\r\n        </button>\r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nclass App extends Component{\r\n\r\n  send = (data) =>{\r\n    console.log(data);\r\n    \r\n  }\r\n  render() {\r\n    return(\r\n      <div>\r\n        <h1>\r\n          Atributo ref\r\n        </h1>\r\n        <InputNoControlado\r\n          onSend={this.send}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n} */\n\n/* formulario con ejemplo de seleccion */\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      tech: 'Vue'\n    };\n\n    this.handleChange = e => {\n      this.setState({\n        tech: e.target.value\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 691,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 692,\n        columnNumber: 9\n      }\n    }, \"Etiqueta Select \", this.state.tech), /*#__PURE__*/React.createElement(\"form\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 695,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"select\", {\n      value: this.state.tech,\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 697,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"Angular\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 698,\n        columnNumber: 13\n      }\n    }, \"Angular\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"React\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 699,\n        columnNumber: 13\n      }\n    }, \"React\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"Vue\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 700,\n        columnNumber: 13\n      }\n    }, \"Vue\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"Vanilla\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 701,\n        columnNumber: 13\n      }\n    }, \"Vanilla\"))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/alber/OneDrive/Documentos/GitHub/React-University/Project III/src/App.js"],"names":["React","Component","forwardRef","App","state","tech","handleChange","e","setState","target","value","render"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,UAA1B,QAA2C,OAA3C;AACA;;;AAEA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2EA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmIA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmDA;AAEA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuEA;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;AAsBA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsDA;;AACA;;AAEA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiFA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiDA;;AACA,MAAMC,GAAN,SAAkBF,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAC1BG,KAD0B,GAClB;AACNC,MAAAA,IAAI,EAAE;AADA,KADkB;;AAAA,SAK1BC,YAL0B,GAKVC,CAAD,IAAM;AACnB,WAAKC,QAAL,CAAc;AACZH,QAAAA,IAAI,EAAEE,CAAC,CAACE,MAAF,CAASC;AADH,OAAd;AAGD,KATyB;AAAA;;AAU1BC,EAAAA,MAAM,GAAI;AACR,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BACmB,KAAKP,KAAL,CAAWC,IAD9B,CADF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEE;AAAQ,MAAA,KAAK,EAAE,KAAKD,KAAL,CAAWC,IAA1B;AAAgC,MAAA,QAAQ,EAAE,KAAKC,YAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAQ,MAAA,KAAK,EAAC,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,eAEE;AAAQ,MAAA,KAAK,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAFF,eAGE;AAAQ,MAAA,KAAK,EAAC,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAHF,eAIE;AAAQ,MAAA,KAAK,EAAC,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAJF,CAFF,CAJF,CADF;AAgBD;;AA3ByB;;AA6B5B,eAAeH,GAAf","sourcesContent":["import React, {Component, forwardRef} from 'react';\r\n/* import './App.css'\r\nimport Chart from 'chart.js'; */\r\n/* Iteraciones */\r\n/* const frutas = [\r\n  'fresa',\r\n  'manzana',\r\n  'sandia',\r\n  'kiwi',\r\n  'durazno',\r\n  'mango',\r\n  'piña'\r\n]\r\n\r\nclass App extends Component {\r\n  render () {\r\n    return (\r\n      <div>\r\n        <ul>\r\n          {frutas.map((fruta) =>{\r\n            return(\r\n            <li>{fruta}</li>\r\n            )\r\n          })}\r\n        </ul>\r\n      </div>\r\n    )\r\n  }\r\n} */\r\n\r\n/* Iteracion con diferentes elementos */\r\n/* class App extends Component{\r\n  state = {\r\n    products: [\r\n      {\r\n        id: 1,\r\n        name: 'camisa unicornio',\r\n        colors: ['#467367', '#05fd88', '#a706ee'],\r\n        price: 20\r\n      },\r\n      {\r\n        id: 2,\r\n        name: 'jeans',\r\n        colors: ['#d35eff','#9956e8', '#876bff', '#5662e8'],\r\n        price: 32\r\n      },\r\n      {\r\n        id: 3,\r\n        name: 'taza',\r\n        colors: ['#d35eff','#9956e8', '#876bff', '#5662e8'],\r\n        price: 20\r\n      },\r\n      {\r\n        id: 4,\r\n        name: 'camisa icecream',\r\n        colors: ['#2544b3','#ff8a69', '#5076ff', '#7fcc2b', '#73b32e'],\r\n        price: 20\r\n      },\r\n      {\r\n        id: 5,\r\n        name: 'camisa dragon',\r\n        colors: ['#b32542','#ff6987', '#ff4f73', '#14b32e', '#5eff78'],\r\n        price: 20\r\n      }\r\n    ]\r\n  }\r\n  render() {\r\n    return(\r\n      <div>\r\n        <h3>\r\n          Iterando lista de objetos\r\n        </h3>\r\n        <div>\r\n          {this.state.products.map((product) =>{\r\n            return(\r\n              <div>\r\n                $ {product.price} - {product.name}\r\n\r\n                {/* aca voy hacer un map anidado para recorrer colors, que es un array de string}\r\n                <div>\r\n                  {product.colors.map((color) =>{\r\n                    return(\r\n                      <span\r\n                        style = {{\r\n                          width: '13px',\r\n                          height: '13px',\r\n                          borderRadius: '0.1em',\r\n                          border: '1px solid gray',\r\n                          display: 'inline-block',\r\n                          margin: '0.1em',\r\n                          background: color\r\n                        }}\r\n                      >\r\n                      </span>\r\n                    )\r\n                  })}\r\n                </div>\r\n              </div>\r\n            )\r\n          })}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n} */\r\n\r\n/* Iterando propiedades de objetos */\r\n/* class App extends Component{\r\n  state = {\r\n    user: {\r\n      name: 'Junior Prueba',\r\n      country: 'Jamaica',\r\n      twitter: '@Chunior',\r\n      youtube: 'Testing'\r\n    }\r\n  }\r\n  render() {\r\n    const { user } = this.state\r\n    const keys = Object.keys(user) //me trae los nombre de los atributos => [ 'name', 'country', 'twitter', 'youtube' ]\r\n    return(\r\n      <div>\r\n        <h3>Iterando propiedades de objetos</h3>\r\n        <ul>\r\n          {keys.map((key) =>(\r\n            <li>\r\n              <strong>{ key }:</strong> { user[key] }\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    )\r\n  }\r\n} */\r\n\r\n/* prop key al iterar listas con React */\r\n/* const users = [\r\n  { id: 1, name: 'Gerado Gallegos', country: 'Mexico'},\r\n  { id: 2, name: 'Leanne Graham', country: 'USA'},\r\n  { id: 3, name: 'Ervin Howell', country: 'Colombia'},\r\n  { id: 4, name: 'Rodrigo Fernandez', country: 'Peru'},\r\n  { id: 5, name: 'Alfredo Bauch', country: 'Guatemala'},\r\n  { id: 6, name: 'Fernanda Valencia', country: 'España'}\r\n]\r\n\r\nclass App extends Component {\r\n  render () {\r\n    return (\r\n      <div>\r\n        <h1>Iterando</h1>\r\n        <ul>\r\n          {users.map((user, index) => (\r\n            <li key={index + user.name}>\r\n              { user.name }\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    )\r\n  }\r\n} */\r\n\r\n/* Iteracion de componentes */\r\n/* const images = [{\r\n  author: {\r\n    name: 'Vlad Bagacian',\r\n    avatar: 'https://images.pexels.com/users/avatars/381880/vlad-bagacian-302.jpeg?w=256&h=256&fit=crop&crop=faces'\r\n  },\r\n  source: 'https://images.pexels.com/photos/1368388/pexels-photo-1368388.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=400',\r\n  views: 153,\r\n  id: 1\r\n},\r\n{\r\n  author: {\r\n    name: 'Moreno Matković',\r\n    avatar: 'https://images.pexels.com/users/avatars/1265479/moreno-matkovic-149.jpeg?w=256&h=256&fit=crop&crop=faces'\r\n  },\r\n  source: 'https://images.pexels.com/photos/2779539/pexels-photo-2779539.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=400',\r\n  views: 214,\r\n  id: 2\r\n},\r\n{\r\n  author: {\r\n    name: 'Jarod Lovekamp',\r\n    avatar: 'https://images.pexels.com/users/avatars/1263347/jarod-lovekamp-411.jpeg?w=256&h=256&fit=crop&crop=faces'\r\n  },\r\n  source: 'https://images.pexels.com/photos/2404444/pexels-photo-2404444.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=400',\r\n  views: 985,\r\n  id: 3\r\n},\r\n{\r\n  author: {\r\n    name: 'Xandro Vandewalle',\r\n    avatar: 'https://images.pexels.com/users/avatars/1431801/xandro-vandewalle-530.jpeg?w=256&h=256&fit=crop&crop=faces'\r\n  },\r\n  source: 'https://images.pexels.com/photos/2763239/pexels-photo-2763239.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=400',\r\n  views: 124,\r\n  id: 4\r\n},\r\n{\r\n  author: {\r\n    name: 'Two Dreamers',\r\n    avatar: 'https://images.pexels.com/users/avatars/1190917/two-dreamers-438.jpeg?w=256&h=256&fit=crop&crop=faces'\r\n  },\r\n  source: 'https://images.pexels.com/photos/2717087/pexels-photo-2717087.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=400',\r\n  views: 987,\r\n  id: 5\r\n},\r\n{\r\n  author: {\r\n    name: 'Luis Quintero',\r\n    avatar: 'https://images.pexels.com/users/avatars/447123/luis-quintero-294.jpeg?w=256&h=256&fit=crop&crop=faces'\r\n  },\r\n  source: 'https://images.pexels.com/photos/1408196/pexels-photo-1408196.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=400',\r\n  views: 147,\r\n  id: 6\r\n},\r\n{\r\n  author: {\r\n    name: 'Tobias Bjørkli',\r\n    avatar: 'https://images.pexels.com/users/avatars/706370/tobias-bjorkli-371.jpeg?w=256&h=256&fit=crop&crop=faces'\r\n  },\r\n  source: 'https://images.pexels.com/photos/1940041/pexels-photo-1940041.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=400',\r\n  views: 387,\r\n  id: 7\r\n},\r\n{\r\n  author: {\r\n    name: 'Renato Abati',\r\n    avatar: 'https://images.pexels.com/users/avatars/963082/renato-abati-706.jpeg?w=256&h=256&fit=crop&crop=faces'\r\n  },\r\n  source: 'https://images.pexels.com/photos/2768877/pexels-photo-2768877.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=400',\r\n  views: 143,\r\n  id: 8\r\n},\r\n{\r\n  author: {\r\n    name: 'Vlad Bagacian',\r\n    avatar: 'https://images.pexels.com/users/avatars/381880/vlad-bagacian-302.jpeg?w=256&h=256&fit=crop&crop=faces'\r\n  },\r\n  source: 'https://images.pexels.com/photos/1368388/pexels-photo-1368388.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=400',\r\n  views: 721,\r\n  id: 9\r\n},\r\n{\r\n  author: {\r\n    name: 'Brayden Law',\r\n    avatar: 'https://images.pexels.com/users/avatars/851295/brayden-law-840.jpeg?w=256&h=256&fit=crop&crop=faces'\r\n  },\r\n  source: 'https://images.pexels.com/photos/1829191/pexels-photo-1829191.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=400',\r\n  views: 637,\r\n  id: 10\r\n}]\r\n\r\nconst Image = ({ image }) =>{\r\n  return(\r\n    <div className='card'>\r\n      <img\r\n        src={image.source}\r\n        alt='Imagen'\r\n        className='image'\r\n      />\r\n      <div className='footer'>\r\n        <img\r\n          src={image.author.avatar}\r\n          alt='Avatar'\r\n          className='avatar'\r\n        />\r\n        <div>\r\n          {image.author.name}\r\n        </div>\r\n        <div>\r\n          {image.views}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className='images'>\r\n        {/* para iterar el array de images uso esto \r\n        {images.map((image) => (\r\n          <Image \r\n            image={image}\r\n            key={image.id}  \r\n          />\r\n        ))}\r\n      </div>\r\n    )\r\n  }\r\n} */\r\n\r\n/* pasar datos al iterar listas con react */\r\n/* class App extends Component{\r\n  state = {\r\n    fruits: [\r\n      { name: 'Fresa', price: 5.4 },\r\n      { name: 'Manzana', price: 2.3 },\r\n      { name: 'Sandia', price: 1.2 },\r\n      { name: 'Guayaba', price: 5 },\r\n      { name: 'Pera', price: 4.12 },\r\n      { name: 'Kiwi', price: 3.87 },\r\n      { name: 'Limon', price: 7.21 },\r\n      { name: 'Melon', price: 6.21 },\r\n      { name: 'Cereza', price: 4.98 }\r\n    ],\r\n\r\n    frutaSeleccionada: {}\r\n  }\r\n  select = (frutaSeleccionada, event) =>{\r\n    this.setState({\r\n      frutaSeleccionada\r\n    })\r\n    \r\n  }\r\n  render() {\r\n    const { fruits } = this.state;\r\n    return (\r\n      <ul>\r\n        {fruits.map((fruit) =>(\r\n          <li \r\n            key={fruit.name}\r\n            onClick={this.select.bind(this, fruit)}\r\n            style={{\r\n              color: this.state.frutaSeleccionada.name === fruit.name ? 'red' : '#000'\r\n            }}\r\n          >\r\n            {fruit.name} - $ {fruit.price}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    )\r\n  }\r\n} */\r\n\r\n/* Referencias o refs con React */\r\n/* class Entrada extends Component{\r\n  constructor() {\r\n    super()\r\n\r\n    //aca dentro del constructor tenemos que llamar al metodo de react createRef\r\n    this.entrada = React.createRef()\r\n  }\r\n  //la siguiente funcion es parte del ciclo de vida de una funcion, esta funcion se ejecuta cuando el componente es montado\r\n  componentDidMount(){\r\n\r\n  }\r\n\r\n  focus = () =>{\r\n    //aca con la siguiente linea hace foco al campo input\r\n    this.entrada.current.focus()\r\n    \r\n  }\r\n\r\n  blur = () =>{\r\n    //en la siguiente linea elimina el foco del elemento referenciado\r\n    this.entrada.current.blur()\r\n  }\r\n  render() {\r\n    return(\r\n      <div>\r\n        {/* //le colocamos ref como propiedad al tag que queremos hacer referencia \r\n        <input type=\"text\" ref={this.entrada}/>\r\n        <button onClick={this.focus}>\r\n          Focus\r\n        </button>\r\n        <button onClick={this.blur}>\r\n          Blur\r\n        </button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nclass App extends Component{\r\n  render() {\r\n    return(\r\n      <div>\r\n        <h1>\r\n          React refs\r\n        </h1>\r\n        <Entrada/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n */\r\n\r\n/* Integrar librerias de terceros usando las refs de React */\r\n\r\n// las graficas se sacaron de chart.js se instalan con npm y luego la importo al principio \r\n/* class Graficas extends Component{\r\n  // hago referencia al ref\r\n  grafica = React.createRef();\r\n  componentDidMount() {\r\n    //cambio var por const ya que son constantes porque nunca van a variar\r\n    //elimino el getelementbyid por this.grafica.current para acceder al contenido del tag canvas\r\n    const ctx = this.grafica.current.getContext('2d');\r\n    const myChart = new Chart(ctx, {\r\n      type: 'bar',\r\n      data: {\r\n          labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],\r\n          datasets: [{\r\n              label: '# of Votes',\r\n              data: [12, 19, 3, 5, 2, 3],\r\n              backgroundColor: [\r\n                  'rgba(255, 99, 132, 0.2)',\r\n                  'rgba(54, 162, 235, 0.2)',\r\n                  'rgba(255, 206, 86, 0.2)',\r\n                  'rgba(75, 192, 192, 0.2)',\r\n                  'rgba(153, 102, 255, 0.2)',\r\n                  'rgba(255, 159, 64, 0.2)'\r\n              ],\r\n              borderColor: [\r\n                  'rgba(255, 99, 132, 1)',\r\n                  'rgba(54, 162, 235, 1)',\r\n                  'rgba(255, 206, 86, 1)',\r\n                  'rgba(75, 192, 192, 1)',\r\n                  'rgba(153, 102, 255, 1)',\r\n                  'rgba(255, 159, 64, 1)'\r\n              ],\r\n              borderWidth: 1\r\n          }]\r\n      },\r\n      options: {\r\n          scales: {\r\n              yAxes: [{\r\n                  ticks: {\r\n                      beginAtZero: true\r\n                  }\r\n              }]\r\n          }\r\n      }\r\n  });\r\n  }\r\n  render() {\r\n    return(\r\n      <div>\r\n        <canvas\r\n        //hago la refencia a este tag\r\n          ref={this.grafica}\r\n          width=\"400\"\r\n          height=\"400\"\r\n        >\r\n\r\n        </canvas>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass App extends Component{\r\n  render() {\r\n    return(\r\n      <div>\r\n        <h1>Usando refs</h1>\r\n        <Graficas/>\r\n      </div>\r\n    )\r\n  }\r\n} */\r\n\r\n/* reenvio de la prop especial ref con forwardRef */\r\n//sirve para reenviar la ref del padre al hijo\r\n/* const FancyInput = React.forwardRef((props, ref) =>(\r\n  <div>\r\n    <input type=\"text\" ref={ref}/>\r\n  </div>\r\n))\r\nclass App extends Component{\r\n  entrada = React.createRef()\r\n\r\n  componentDidMount(){\r\n    console.log(this.entrada);\r\n    \r\n  }\r\n  render() {\r\n    return(\r\n      <div>\r\n        <h1>Reenvio de refs</h1>\r\n        <FancyInput ref={this.entrada}/>\r\n      </div>\r\n    )\r\n  }\r\n}  */\r\n\r\n/* manejando inputs no controlados con refs */\r\n\r\n/* const Unicorn = () =>{\r\n  return(\r\n    <span>\r\n      Imagen\r\n    </span>\r\n  )\r\n}\r\n\r\nclass InputNoControlado extends Component{\r\n\r\n\r\n  handleSubmit = (e) =>{\r\n    //aca obtengo los valores del ref de la siguiente forma\r\n    // no olvidar el current.value para obtener el valor\r\n\r\n    //respecto a los inputs controlados, cuando le pase el evento(e) como paremetro al ser un form, le puedo pasar .target y el valor que pase dentro de los [] indica cual de los input va a tomar, es decir, si paso e.target[0] este me tomaria el primer input del form\r\n    //paso preventdefault para que no recargue la pagina y se puedan quedar los cambios guardados\r\n    e.preventDefault()\r\n    const nombre = e.target[0].value\r\n    const email = e.target[1].value\r\n    //manejo de datos\r\n    this.props.onSend({nombre, email})\r\n  }\r\n  render(){\r\n    return(\r\n      <form onSubmit={this.handleSubmit}>\r\n        <input type=\"text\" placeholder='Nombre'/>\r\n        <input type=\"text\" placeholder='Email'/>\r\n        <button>\r\n          Enviar\r\n        </button>\r\n      </form>\r\n    )\r\n  }\r\n}\r\nclass App extends Component{\r\n  send = (data) =>{\r\n    console.log(data);\r\n    \r\n  }\r\n  render() {\r\n    return(\r\n      <div>\r\n        <h1>\r\n          Inputs no controlados refs <Unicorn/>\r\n        </h1>\r\n        <InputNoControlado\r\n          onSend={this.send}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n} */\r\n\r\n/* Ventajas y desventajas de inputs controlados y no controlados */\r\n/* en los inputs no controlados su sintaxis se parece mas a html puro, el cual lo hace mas visible de visualizar, tiene en desventaja que la informacion que suministre el usuario solo podra ser revisada cuando el usuario la envie, antes de esto no se podra corregir o modificar */\r\n\r\n/* Inputs controlados */\r\n/* class InputControlado extends Component{\r\n  state = {\r\n    text: '',\r\n    tieneError: false,\r\n    color: '#E8E8E8'\r\n  }\r\n\r\n  actualizar = (e) =>{\r\n    const text= e.target.value\r\n    const tieneError = text !== '' && text.length < 5\r\n    //le coloco let ya que este si va ha variar\r\n    let color = 'green'\r\n    //trim limpia los espacios en blanco al principio y al final\r\n    if (text.trim() === ''){\r\n      color= '#E8E8E8'\r\n    }\r\n\r\n    if (text.trim() !== '' && text.trim().length < 5){\r\n      color= 'red'\r\n    }\r\n\r\n    this.setState({ text, color })\r\n    \r\n    //propagando datos al padre\r\n    this.props.onChange(this.props.name, text)\r\n  }\r\n\r\n  render() {\r\n    const styles = {\r\n      border: `1px solid ${this.state.color}`,\r\n      padding: '0.3em 0.6em',\r\n      outline: 'none'\r\n    }\r\n    return(\r\n      <input \r\n        type=\"text\"\r\n        value={this.state.text}\r\n        onChange={this.actualizar}\r\n        style={styles}\r\n        placeholder={this.props.placeholder}\r\n      />\r\n    )\r\n  }\r\n}\r\nclass App extends Component{\r\n  state = {\r\n    name: '',\r\n    email: ''\r\n  }\r\n  actualizar = (name, text) =>{\r\n    this.setState({\r\n      [name]: text\r\n    })\r\n    \r\n  }\r\n  render() {\r\n    return(\r\n      <div>\r\n        <h1>Inputs Controlados</h1>\r\n        <InputControlado\r\n          onChange={this.actualizar}\r\n          placeholder='Nombre Completo'\r\n          //le paso este valor para que sea reutilizable el codigo y asi no tener que repetir codigo para recibir los distintos parametros\r\n          name='name'\r\n        />\r\n        <InputControlado\r\n          onChange={this.actualizar}\r\n          placeholder='Tu Email'\r\n          name='email'\r\n        />\r\n        <h2>\r\n          Nombre: {this.state.name}\r\n        </h2>\r\n        <h2>\r\n          Email: {this.state.email}\r\n        </h2>\r\n      </div>\r\n    )\r\n  }\r\n} */\r\n\r\n/* usando el atributo for en formularios */\r\n/* class InputNoControlado extends Component{\r\n  render() {\r\n    return(\r\n      <form onSubmit={this.handleSubmit}>\r\n        <p>\r\n          <label htmlFor='name'>Nombre:</label>\r\n          <input \r\n            type=\"text\"\r\n            placeholder='Nombre'\r\n            id='name'\r\n          />\r\n        </p>\r\n        <p>\r\n          <label htmlFor='email'>E-mail:</label>\r\n          <input \r\n            type=\"text\"\r\n            placeholder='Email'\r\n            id='email'\r\n          />\r\n        </p>\r\n        <button>\r\n          Enviar\r\n        </button>\r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nclass App extends Component{\r\n\r\n  send = (data) =>{\r\n    console.log(data);\r\n    \r\n  }\r\n  render() {\r\n    return(\r\n      <div>\r\n        <h1>\r\n          Atributo ref\r\n        </h1>\r\n        <InputNoControlado\r\n          onSend={this.send}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n} */\r\n\r\n/* formulario con ejemplo de seleccion */\r\nclass App extends Component {\r\n  state = {\r\n    tech: 'Vue'\r\n  }\r\n\r\n  handleChange = (e) =>{\r\n    this.setState({\r\n      tech: e.target.value\r\n    })\r\n  }\r\n  render () {\r\n    return(\r\n      <div>\r\n        <h1>\r\n          Etiqueta Select {this.state.tech}\r\n        </h1>\r\n        <form>\r\n          {/* la propiedad dentro del tag selected hace que por defecto este seleccionado el valor que coloquemos dentro sin la necesidad de pasarle selected a la opcion que necesitamos que se muestre de primero */}\r\n          <select value={this.state.tech} onChange={this.handleChange}>\r\n            <option value=\"Angular\">Angular</option>\r\n            <option value=\"React\">React</option>\r\n            <option value=\"Vue\">Vue</option>\r\n            <option value=\"Vanilla\">Vanilla</option>\r\n          </select>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default App;"]},"metadata":{},"sourceType":"module"}